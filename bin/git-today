#!/usr/bin/perl
# vim:ft=perl:et:
# abstract: traverse dirs in $HOME/dev and tell me what I accomplished today

package Git::today;

our $VERSION = '0.10';

use strict;
use warnings;

use POSIX               qw(strftime);
use File::Basename      qw(dirname);
use File::LsColor       qw(ls_color);
use Term::ExtendedColor qw(fg bg bold italic underline);
use Git::Sub;


my $dev_dir         = "$ENV{HOME}/dev";
my @additional_dirs = ("$ENV{HOME}/etc", "$ENV{HOME}/dev/_upstream");

my $today = strftime("%Y-%m-%d", localtime());
$today = '2019-01-10';

my %seen = ();

for my $project(glob("$dev_dir/*"), @additional_dirs) {
  if(-d "$project/.git") {
    chdir($project) or (warn $! and next);

    # use a char that's certain to not be included in any commit msg
    for my $log_item(git::log qw(HEAD  --date=short --pretty=format:%cd¶%x00%s%x00)) {
      my($date, $commit) = split(/¶/, $log_item);

      next if $date ne $today;

      my($subject, $msg);
      if($commit =~ m/^(\S+):\s+(.+)$/) {
        ($subject, $msg) = ($1, $2);
      }
      else {
        $subject = "";
        $msg = "\b$commit";
      }


#      # highlight any filename with an extension
#      if($commit =~ m/^(\S+):\s+(.+)$/) {
#        $commit = sprintf("%s: %s", ls_color($1), $2);
#      }

      # highlight any module name
#      $commit =~ s/([A-Z_a-z][0-9A-Z_a-z]*::[0-9A-Z_a-z]+)/fg(196, $1)/e;

      my ($basedir) = $project =~ m{.+/(.+)$};
      printf("%s %s %s\n", $seen{$basedir}
        ? ""
        : paint($basedir),
          fg(35, bold(sprintf("%20.20s", $subject))), italic(fg(137, $msg)),
#          fg(137, $subject),fg(35, sprintf("%20.20s", $msg)), 
          
        );

      # only print the project name once
      $seen{$basedir}++;
    }
  }
}


sub paint {
  my $data = shift;
  $data = "$data.git";

  my $len = length($data);
  $len += 2;

#< please don't look at this
  return
  sprintf "\t\t\t\b\b\b@{[fg(107, '╔')]}" . "@{[fg(106, '═')]}" x $len . "@{[fg(107, '╗')]}\n" .
  sprintf qq/\t\t\t\b\b\b@{[fg(107, "║")]}@{[italic(bold(fg(107, " $data " )))]}@{[fg(107, "║")]}\n/ .
  sprintf "\t\t\t\b\b\b@{[fg(107, '╚')]}" . "@{[fg(106, '═')]}" x $len . "@{[fg(107, '╝')]}\n";

#  sprintf "\t\t\t\b\b\b@{[fg(107, '▛')]}" . "@{[fg(106, '▔')]}" x $len . "@{[fg(107, '▜')]}\n" .
#  sprintf qq/\t\t\t\b\b\b@{[fg(107, "▏")]}@{[italic(bold(fg(107, " $data " )))]}@{[fg(107, "▕")]}\n/ .
#  sprintf "\t\t\t\b\b\b@{[fg(107, '▙')]}" . "@{[fg(106, '▁')]}" x $len . "@{[fg(107, '▟')]}\n";
#>

#  print  sprintf "╔═══════╗\n";
#  print  sprintf "║ $data ║\n";
#  print  sprintf "═══════\n";
}
